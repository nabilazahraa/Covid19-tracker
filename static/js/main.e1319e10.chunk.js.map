{"version":3,"sources":["components/lineGraph.js","axios.js","components/CovidSummary.js","App.js","reportWebVitals.js","index.js"],"names":["LineGraph","props","className","data","labels","label","map","l","substr","datasets","yAxis","fill","backgroundColor","borderColor","axiosInstance","axios","create","baseURL","CovidSummary","totalConfirmed","totalRecovered","totalDeaths","country","style","textTransform","color","opacity","separator","end","App","useState","setTotalConfirmed","setTotalRecovered","setTotalDeaths","covidSummary","setcovidSummary","days","setDays","setCountry","coronaCountAr","setCoronaCountAr","setLabel","useEffect","document","title","get","then","res","status","Global","TotalConfirmed","NewRecovered","TotalDeaths","console","log","catch","error","getCoronaReportbyDateRange","countrySlug","from","to","yAxisCoronaCount","d","Cases","xAxisLabel","Date","covidDetails","Countries","find","Slug","TotalRecovered","formatDate","date","year","getFullYear","month","getMonth","_date","getDate","value","onChange","e","target","setDate","Country","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e1319e10.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nconst LineGraph = (props) => {\r\n  return (\r\n    <div className=\"table\">\r\n      <Line\r\n        data={{\r\n          labels: props.label.map((l) => l.substr(0, 10)),\r\n          datasets: [\r\n            {\r\n              label: \"Corona Virus across the country\",\r\n              data: props.yAxis,\r\n              fill: true,\r\n              backgroundColor: \"rgb(255, 99, 132, 0.5)\",\r\n              borderColor: \"rgba(255, 99, 132, 0.7)\",\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LineGraph;\r\n","import axios from \"axios\";\r\n\r\nconst axiosInstance = axios.create({\r\n  baseURL: `https://api.covid19api.com/`,\r\n});\r\n\r\nexport default axiosInstance;\r\n","import React from \"react\";\r\n\r\nimport CountUp from \"react-countup\";\r\n\r\nconst CovidSummary = (props) => {\r\n  const { totalConfirmed, totalRecovered, totalDeaths, country } = props;\r\n\r\n  return (\r\n    <div>\r\n      <div>\r\n        <div>\r\n          <h1\r\n            className=\"country\"\r\n            style={{ textTransform: \"capitalize\", color: \"Grey\" }}\r\n          >\r\n            {country === \"\" ? \"World Wide Corona Report\" : country}\r\n          </h1>\r\n        </div>\r\n        <div className=\"header\">\r\n          <div className=\"confirm\">\r\n            <span style={{ color: \"white\", opacity: \"0.85\" }}>\r\n              Total Confirmed\r\n            </span>\r\n            <br />\r\n            <br></br>\r\n            <h2 style={{ color: \"white\" }}>\r\n              {<CountUp separator=\",\" end={totalConfirmed} />}\r\n            </h2>\r\n          </div>\r\n          <div className=\"recover\">\r\n            <span style={{ color: \"white\", opacity: \"0.85\" }}>\r\n              Total Recovered\r\n            </span>\r\n            <br />\r\n            <br></br>\r\n            <h2 style={{ color: \"white\" }}>\r\n              {\" \"}\r\n              {<CountUp separator=\",\" end={totalRecovered} />}\r\n            </h2>\r\n          </div>\r\n          <div className=\"death\">\r\n            <span style={{ color: \"white\", opacity: \"0.85\" }}>\r\n              Total Deaths\r\n            </span>\r\n            <br />\r\n            <br></br>\r\n\r\n            <h2 style={{ color: \"white\" }}>\r\n              {<CountUp separator=\",\" end={totalDeaths} />}\r\n            </h2>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CovidSummary;\r\n","import \"./App.css\";\nimport React, { useEffect, useState } from \"react\";\nimport LineGraph from \"./components/lineGraph\";\nimport axios from \"./axios\";\nimport CovidSummary from \"./components/CovidSummary\";\n\nfunction App() {\n  const [totalConfirmed, setTotalConfirmed] = useState(0);\n  const [totalRecovered, setTotalRecovered] = useState(0);\n  const [totalDeaths, setTotalDeaths] = useState(0);\n  const [covidSummary, setcovidSummary] = useState({});\n  const [days, setDays] = useState(7);\n  const [country, setCountry] = useState(\"\");\n  const [coronaCountAr, setCoronaCountAr] = useState([]);\n  const [label, setLabel] = useState([]);\n\n  useEffect(() => {\n    document.title = \"Covid19 Tracker\";\n  }, []);\n  //componentDidMount\n  useEffect(() => {\n    axios\n      .get(`/summary`)\n      .then((res) => {\n        if (res.status === 200) {\n          setTotalConfirmed(res.data.Global.TotalConfirmed);\n          setTotalRecovered(res.data.Global.NewRecovered);\n          setTotalDeaths(res.data.Global.TotalDeaths);\n          setcovidSummary(res.data);\n        }\n        console.log(res);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }, []);\n\n  const getCoronaReportbyDateRange = (countrySlug, from, to) => {\n    axios\n      .get(\n        `/country/${countrySlug}/status/confirmed?from=${from}T00:00:00Z&to=${to}T00:00:00Z`\n      )\n      .then((res) => {\n        console.log(res);\n\n        const yAxisCoronaCount = res.data.map((d) => d.Cases);\n        const xAxisLabel = res.data.map((d) => d.Date);\n        const covidDetails = covidSummary.Countries.find(\n          (country) => country.Slug === countrySlug\n        );\n        setCoronaCountAr(yAxisCoronaCount);\n        setTotalConfirmed(covidDetails.TotalConfirmed);\n        setTotalRecovered(covidDetails.TotalRecovered);\n        setTotalDeaths(covidDetails.TotalDeaths);\n        setLabel(xAxisLabel);\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  const formatDate = (date) => {\n    const d = new Date(date);\n    const year = d.getFullYear();\n    const month = `${d.getMonth() + 1}`;\n    const _date = d.getDate();\n\n    return `${year}-${month}-${_date}`;\n  };\n\n  const countryHandler = (e) => {\n    setCountry(e.target.value);\n\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - days));\n    console.log(from, to);\n    getCoronaReportbyDateRange(e.target.value, from, to);\n  };\n\n  const daysHandler = (e) => {\n    setDays(e.target.value);\n\n    const d = new Date();\n    const to = formatDate(d);\n    const from = formatDate(d.setDate(d.getDate() - e.target.value));\n    getCoronaReportbyDateRange(country, from, to);\n  };\n\n  return (\n    <div className=\"App\">\n      <h2 className=\"covid\" style={{ color: \"#fd7e99\" }}>\n        COVID-19 TRACKER\n      </h2>\n      <CovidSummary\n        totalConfirmed={totalConfirmed}\n        totalRecovered={totalRecovered}\n        totalDeaths={totalDeaths}\n        country={country}\n      />\n      <div>\n        <select value={country} onChange={countryHandler}>\n          <option value=\"\">Select Country</option>\n          {covidSummary.Countries &&\n            covidSummary.Countries.map((country) => (\n              <option key={country.Slug} value={country.Slug}>\n                {country.Country}\n              </option>\n            ))}\n        </select>\n        <select value={days} onChange={daysHandler}>\n          <option value=\"7\">Last 7 Days</option>\n          <option value=\"30\">Last 30 Days</option>\n          <option value=\"90\">Last 90 Days</option>\n        </select>\n      </div>\n      <LineGraph yAxis={coronaCountAr} label={label} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}